
'''
THIS FILE IS AUTOGENERATED, DO NOT EDIT!!!
'''

from datetime import datetime
import uuid

from opcua import ua

from enum import IntEnum

class CRCL_StopConditionEnumDataType(IntEnum):

    '''
    CRCL_StopConditionEnumDataType EnumInt autogenerated from xml
    '''

    IMMEDIATE = 0
    FAST = 1
    NORMAL = 2


class CRCL_AngleUnitEnumDataType(IntEnum):

    '''
    CRCL_AngleUnitEnumDataType EnumInt autogenerated from xml
    '''

    DEGREE = 0
    RADIAN = 1


class CRCL_ForceUnitEnumDataType(IntEnum):

    '''
    CRCL_ForceUnitEnumDataType EnumInt autogenerated from xml
    '''

    NEWTON = 0
    POUND = 1
    OUNCE = 2


class CRCL_LengthUnitEnumDataType(IntEnum):

    '''
    CRCL_LengthUnitEnumDataType EnumInt autogenerated from xml
    '''

    METER = 0
    MILLIMETER = 1
    INCH = 2


class CRCL_TorqueUnitEnumDataType(IntEnum):

    '''
    CRCL_TorqueUnitEnumDataType EnumInt autogenerated from xml
    '''

    NEWTONMETER = 0
    FOOTPOUND = 1


class CRCL_GuardLimitEnumDataType(IntEnum):

    '''
    CRCL_GuardLimitEnumDataType EnumInt autogenerated from xml
    '''

    OVER_MAX = 0
    UNDER_MIN = 1
    INCREASE_OVER_LIMIT = 2
    DECREASE_BEYOND_LIMIT = 3


class CRCL_CommandStateEnumDataType(IntEnum):

    '''
    CRCL_CommandStateEnumDataType EnumInt autogenerated from xml
    '''

    CRCL_DONE = 0
    CRCL_ERROR = 1
    CRCL_WORKING = 2
    CRCL_READY = 3


class CRCLCommandsBufferState(IntEnum):

    '''
    CRCLCommandsBufferState EnumInt autogenerated from xml
    '''

    PROCESSING_PENDING = 0
    PROCESSING_RUNNING = 1
    PROCESSING_FAILED = 2
    AWAITING = 3


class CRCL_FractionDataType(object):

    '''
    CRCL_FractionDataType structure autogenerated from xml
    '''

    ua_types = [
        ('fraction', 'Double'),
        ('fractionMax', 'Double'),
        ('fractionMin', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.fraction = 0
        self.fractionMax = 0
        self.fractionMin = 0


class CRCL_DataThingDataType(object):

    '''
    CRCL_DataThingDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None


class CRCL_PointDataType(object):

    '''
    CRCL_PointDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('x', 'Double'),
        ('y', 'Double'),
        ('z', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.x = 0
        self.y = 0
        self.z = 0


class CRCL_VectorDataType(object):

    '''
    CRCL_VectorDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('i', 'Double'),
        ('j', 'Double'),
        ('k', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.i = 0
        self.j = 0
        self.k = 0


class CRCL_PoseDataType(object):

    '''
    CRCL_PoseDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('point', 'CRCL_PointDataType'),
        ('xAxis', 'CRCL_VectorDataType'),
        ('zAxis', 'CRCL_VectorDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.point = ua.CRCL_PointDataType()
        self.xAxis = ua.CRCL_VectorDataType()
        self.zAxis = ua.CRCL_VectorDataType()


class CRCL_TwistDataType(object):

    '''
    CRCL_TwistDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('linearVelocity', 'CRCL_VectorDataType'),
        ('angularVelocity', 'CRCL_VectorDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.linearVelocity = ua.CRCL_VectorDataType()
        self.angularVelocity = ua.CRCL_VectorDataType()


class CRCL_WrenchDataType(object):

    '''
    CRCL_WrenchDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('force', 'CRCL_VectorDataType'),
        ('moment', 'CRCL_VectorDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.force = ua.CRCL_VectorDataType()
        self.moment = ua.CRCL_VectorDataType()


class CRCL_PoseToleranceDataType(object):

    '''
    CRCL_PoseToleranceDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('xPointTolerance', 'Double'),
        ('yPointTolerance', 'Double'),
        ('zPointTolerance', 'Double'),
        ('xAxisTolerance', 'Double'),
        ('zAxisTolerance', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.xPointTolerance = 0
        self.yPointTolerance = 0
        self.zPointTolerance = 0
        self.xAxisTolerance = 0
        self.zAxisTolerance = 0


class CRCL_ParameterSettingDataType(object):

    '''
    CRCL_ParameterSettingDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('parameterName', 'String'),
        ('parameterValue', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.parameterName = None
        self.parameterValue = None


class CRCL_RotAccelAbsoluteDataType(object):

    '''
    CRCL_RotAccelAbsoluteDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('setting', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.setting = 0


class CRCL_RotAccelRelativeDataType(object):

    '''
    CRCL_RotAccelRelativeDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('fraction', 'CRCL_FractionDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.fraction = ua.CRCL_FractionDataType()


class CRCL_RotAccelDataType(object):

    '''
    CRCL_RotAccelDataType structure autogenerated from xml
    '''

    ua_types = [
        ('SwitchField', 'UInt32'),
        ('rotAccelAbsoluteDataType', 'CRCL_RotAccelAbsoluteDataType'),
        ('rotAccelRelativeDataType', 'CRCL_RotAccelRelativeDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.SwitchField = 0
        self.rotAccelAbsoluteDataType = ua.CRCL_RotAccelAbsoluteDataType()
        self.rotAccelRelativeDataType = ua.CRCL_RotAccelRelativeDataType()


class CRCL_RotSpeedAbsoluteDataType(object):

    '''
    CRCL_RotSpeedAbsoluteDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('setting', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.setting = 0


class CRCL_RotSpeedRelativeDataType(object):

    '''
    CRCL_RotSpeedRelativeDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('fraction', 'CRCL_FractionDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.fraction = ua.CRCL_FractionDataType()


class CRCL_RotSpeedDataType(object):

    '''
    CRCL_RotSpeedDataType structure autogenerated from xml
    '''

    ua_types = [
        ('SwitchField', 'UInt32'),
        ('rotSpeedAbsoluteDataType', 'CRCL_RotSpeedAbsoluteDataType'),
        ('rotSpeedRelativeDataType', 'CRCL_RotSpeedRelativeDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.SwitchField = 0
        self.rotSpeedAbsoluteDataType = ua.CRCL_RotSpeedAbsoluteDataType()
        self.rotSpeedRelativeDataType = ua.CRCL_RotSpeedRelativeDataType()


class CRCL_TransAccelAbsoluteDataType(object):

    '''
    CRCL_TransAccelAbsoluteDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('setting', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.setting = 0


class CRCL_TransAccelRelativeDataType(object):

    '''
    CRCL_TransAccelRelativeDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('fraction', 'CRCL_FractionDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.fraction = ua.CRCL_FractionDataType()


class CRCL_TransAccelDataType(object):

    '''
    CRCL_TransAccelDataType structure autogenerated from xml
    '''

    ua_types = [
        ('SwitchField', 'UInt32'),
        ('transAccelAbsoluteDataType', 'CRCL_TransAccelAbsoluteDataType'),
        ('transAccelRelativeDataType', 'CRCL_TransAccelRelativeDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.SwitchField = 0
        self.transAccelAbsoluteDataType = ua.CRCL_TransAccelAbsoluteDataType()
        self.transAccelRelativeDataType = ua.CRCL_TransAccelRelativeDataType()


class CRCL_TransSpeedAbsoluteDataType(object):

    '''
    CRCL_TransSpeedAbsoluteDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('setting', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.setting = 0


class CRCL_TransSpeedRelativeDataType(object):

    '''
    CRCL_TransSpeedRelativeDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('fraction', 'CRCL_FractionDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.fraction = ua.CRCL_FractionDataType()


class CRCL_TransSpeedDataType(object):

    '''
    CRCL_TransSpeedDataType structure autogenerated from xml
    '''

    ua_types = [
        ('SwitchField', 'UInt32'),
        ('transSpeedAbsoluteDataType', 'CRCL_TransSpeedAbsoluteDataType'),
        ('transSpeedRelativeDataType', 'CRCL_TransSpeedRelativeDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.SwitchField = 0
        self.transSpeedAbsoluteDataType = ua.CRCL_TransSpeedAbsoluteDataType()
        self.transSpeedRelativeDataType = ua.CRCL_TransSpeedRelativeDataType()


class CRCL_ConfigureJointReportDataType(object):

    '''
    CRCL_ConfigureJointReportDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('jointNumber', 'Int32'),
        ('reportPosition', 'Boolean'),
        ('reportTorqueOrForce', 'Boolean'),
        ('reportVelocity', 'Boolean'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.jointNumber = 0
        self.reportPosition = True
        self.reportTorqueOrForce = True
        self.reportVelocity = True


class CRCL_GuardDataType(object):

    '''
    CRCL_GuardDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('sensorID', 'String'),
        ('subField', 'String'),
        ('limitType', 'CRCL_GuardLimitEnumDataType'),
        ('limitValue', 'Double'),
        ('recheckTimeMicroSeconds', 'UInt32'),
        ('checkCount', 'UInt32'),
        ('lastCheckTime', 'UInt32'),
        ('lastCheckValue', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.sensorID = None
        self.subField = None
        self.limitType = ua.CRCL_GuardLimitEnumDataType(3)
        self.limitValue = 0
        self.recheckTimeMicroSeconds = 0
        self.checkCount = 0
        self.lastCheckTime = 0
        self.lastCheckValue = 0


class CRCL_JointPositionToleranceSettingDataType(object):

    '''
    CRCL_JointPositionToleranceSettingDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('jointNumber', 'Int32'),
        ('jointPositionTolerance', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.jointNumber = 0
        self.jointPositionTolerance = 0


class CRCL_JointPositionsTolerancesDataType(object):

    '''
    CRCL_JointPositionsTolerancesDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('setting', 'ListOfCRCL_JointPositionToleranceSettingDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.setting = []


class CRCL_PoseAndSetDataType(object):

    '''
    CRCL_PoseAndSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('point', 'CRCL_PointDataType'),
        ('xAxis', 'CRCL_VectorDataType'),
        ('zAxis', 'CRCL_VectorDataType'),
        ('coordinated', 'Boolean'),
        ('transSpeed', 'CRCL_TransSpeedDataType'),
        ('rotSpeed', 'CRCL_RotSpeedDataType'),
        ('transAccel', 'CRCL_TransAccelDataType'),
        ('rotAccel', 'CRCL_RotAccelDataType'),
        ('poseTolerance', 'CRCL_PoseToleranceDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.point = ua.CRCL_PointDataType()
        self.xAxis = ua.CRCL_VectorDataType()
        self.zAxis = ua.CRCL_VectorDataType()
        self.coordinated = True
        self.transSpeed = ua.CRCL_TransSpeedDataType()
        self.rotSpeed = ua.CRCL_RotSpeedDataType()
        self.transAccel = ua.CRCL_TransAccelDataType()
        self.rotAccel = ua.CRCL_RotAccelDataType()
        self.poseTolerance = ua.CRCL_PoseToleranceDataType()


class CRCLCommandDataType(object):

    '''
    CRCLCommandDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []


class MiddleCommandDataType(object):

    '''
    MiddleCommandDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []


class EndCanonDataType(object):

    '''
    EndCanonDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []


class InitCanonDataType(object):

    '''
    InitCanonDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []


class CRCL_JointDetailsDataType(object):

    '''
    CRCL_JointDetailsDataType structure autogenerated from xml
    '''

    ua_types = [
        ('SwitchField', 'UInt32'),
        ('jointSpeedAccel', 'CRCL_JointSpeedAccelDataType'),
        ('jointForceTorque', 'CRCL_JointForceTorqueDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.SwitchField = 0
        self.jointSpeedAccel = ua.CRCL_JointSpeedAccelDataType()
        self.jointForceTorque = ua.CRCL_JointForceTorqueDataType()


class CRCL_ActuateJointDataType(object):

    '''
    CRCL_ActuateJointDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('jointNumber', 'Int32'),
        ('jointPosition', 'Double'),
        ('jointDetails', 'CRCL_JointDetailsDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.jointNumber = 0
        self.jointPosition = 0
        self.jointDetails = ua.CRCL_JointDetailsDataType()


class CRCL_JointForceTorqueDataType(object):

    '''
    CRCL_JointForceTorqueDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('setting', 'Double'),
        ('changeRate', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.setting = 0
        self.changeRate = 0


class CRCL_JointSpeedAccelDataType(object):

    '''
    CRCL_JointSpeedAccelDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('jointSpeed', 'Double'),
        ('jointAccel', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.jointSpeed = 0
        self.jointAccel = 0


class ActuateJointsDataType(object):

    '''
    ActuateJointsDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('actuateJoint', 'ListOfCRCL_ActuateJointDataType'),
        ('jointTolerances', 'CRCL_JointPositionsTolerancesDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.actuateJoint = []
        self.jointTolerances = ua.CRCL_JointPositionsTolerancesDataType()


class MoveToDataType(object):

    '''
    MoveToDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('moveStraight', 'Boolean'),
        ('endPosition', 'CRCL_PoseDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.moveStraight = True
        self.endPosition = ua.CRCL_PoseDataType()


class CloseToolChangerDataType(object):

    '''
    CloseToolChangerDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []


class DwellDataType(object):

    '''
    DwellDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('dwellTime', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.dwellTime = 0


class GetStatusDataType(object):

    '''
    GetStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []


class MessageDataType(object):

    '''
    MessageDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('message', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.message = None


class MoveScrewDataType(object):

    '''
    MoveScrewDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('startPosition', 'CRCL_PoseDataType'),
        ('axisPoint', 'CRCL_PointDataType'),
        ('axialDistanceFree', 'Double'),
        ('axialDistanceScrew', 'Double'),
        ('turn', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.startPosition = ua.CRCL_PoseDataType()
        self.axisPoint = ua.CRCL_PointDataType()
        self.axialDistanceFree = 0
        self.axialDistanceScrew = 0
        self.turn = 0


class MoveThroughToDataType(object):

    '''
    MoveThroughToDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('moveStraight', 'Boolean'),
        ('waypoint', 'ListOfCRCL_PoseDataType'),
        ('numPositions', 'UInt32'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.moveStraight = True
        self.waypoint = []
        self.numPositions = 0


class OpenToolChangerDataType(object):

    '''
    OpenToolChangerDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []


class RunProgramDataType(object):

    '''
    RunProgramDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('programText', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.programText = None


class SetAngleUnitsDataType(object):

    '''
    SetAngleUnitsDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('unitName', 'CRCL_AngleUnitEnumDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.unitName = ua.CRCL_AngleUnitEnumDataType(1)


class SetEndeffectorParametersDataType(object):

    '''
    SetEndeffectorParametersDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('parameterSetting', 'ListOfCRCL_ParameterSettingDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.parameterSetting = []


class SetEndeffectorDataType(object):

    '''
    SetEndeffectorDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('setting', 'CRCL_FractionDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.setting = ua.CRCL_FractionDataType()


class SetEndPoseToleranceDataType(object):

    '''
    SetEndPoseToleranceDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('tolerance', 'CRCL_PoseToleranceDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.tolerance = ua.CRCL_PoseToleranceDataType()


class SetForceUnitsDataType(object):

    '''
    SetForceUnitsDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('unitName', 'CRCL_ForceUnitEnumDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.unitName = ua.CRCL_ForceUnitEnumDataType(2)


class SetIntermediatePoseToleranceDataType(object):

    '''
    SetIntermediatePoseToleranceDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('tolerance', 'CRCL_PoseToleranceDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.tolerance = ua.CRCL_PoseToleranceDataType()


class SetLengthUnitsDataType(object):

    '''
    SetLengthUnitsDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('unitName', 'CRCL_LengthUnitEnumDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.unitName = ua.CRCL_LengthUnitEnumDataType(2)


class SetMotionCoordinationDataType(object):

    '''
    SetMotionCoordinationDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('coordinated', 'Boolean'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.coordinated = True


class SetRobotParametersDataType(object):

    '''
    SetRobotParametersDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('parameterSetting', 'ListOfCRCL_ParameterSettingDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.parameterSetting = []


class SetTorqueUnitsDataType(object):

    '''
    SetTorqueUnitsDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('unitName', 'CRCL_TorqueUnitEnumDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.unitName = ua.CRCL_TorqueUnitEnumDataType(1)


class StopMotionDataType(object):

    '''
    StopMotionDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('stopCondition', 'CRCL_StopConditionEnumDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.stopCondition = ua.CRCL_StopConditionEnumDataType(2)


class ConfigureStatusReportDataType(object):

    '''
    ConfigureStatusReportDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('reportJointStatuses', 'Boolean'),
        ('reportPoseStatus', 'Boolean'),
        ('reportGripperStatus', 'Boolean'),
        ('reportSettingsStatus', 'Boolean'),
        ('reportSensorsStatus', 'Boolean'),
        ('reportGuardsStatus', 'Boolean'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.reportJointStatuses = True
        self.reportPoseStatus = True
        self.reportGripperStatus = True
        self.reportSettingsStatus = True
        self.reportSensorsStatus = True
        self.reportGuardsStatus = True


class EnableSensorDataType(object):

    '''
    EnableSensorDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('sensorID', 'String'),
        ('sensorOption', 'ListOfCRCL_ParameterSettingDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.sensorID = None
        self.sensorOption = []


class DisableSensorDataType(object):

    '''
    DisableSensorDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('sensorID', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.sensorID = None


class EnableGripperDataType(object):

    '''
    EnableGripperDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('gripperName', 'String'),
        ('gripperOption', 'ListOfCRCL_ParameterSettingDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.gripperName = None
        self.gripperOption = []


class DisableGripperDataType(object):

    '''
    DisableGripperDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('gripperName', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.gripperName = None


class EnableRobotParameterStatusDataType(object):

    '''
    EnableRobotParameterStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('robotParameterName', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.robotParameterName = None


class DisableRobotParameterStatusDataType(object):

    '''
    DisableRobotParameterStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('robotParameterName', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.robotParameterName = None


class SetDefaultJointPositionsTolerancesDataType(object):

    '''
    SetDefaultJointPositionsTolerancesDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('jointTolerances', 'CRCL_JointPositionsTolerancesDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.jointTolerances = ua.CRCL_JointPositionsTolerancesDataType()


class SetRotAccelDataType(object):

    '''
    SetRotAccelDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('rotAccel', 'CRCL_RotAccelDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.rotAccel = ua.CRCL_RotAccelDataType()


class SetTransAccelDataType(object):

    '''
    SetTransAccelDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('transAccel', 'CRCL_TransAccelDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.transAccel = ua.CRCL_TransAccelDataType()


class SetRotSpeedDataType(object):

    '''
    SetRotSpeedDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('rotSpeed', 'CRCL_RotSpeedDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.rotSpeed = ua.CRCL_RotSpeedDataType()


class SetTransSpeedDataType(object):

    '''
    SetTransSpeedDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('transSpeed', 'CRCL_TransSpeedDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.transSpeed = ua.CRCL_TransSpeedDataType()


class ConfigureJointReportsDataType(object):

    '''
    ConfigureJointReportsDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('realTimeCommand', 'Boolean'),
        ('realTimeParameterNode', 'NodeId'),
        ('guard', 'ListOfCRCL_GuardDataType'),
        ('resetAll', 'Boolean'),
        ('configureJointReport', 'ListOfCRCL_ConfigureJointReportDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.realTimeCommand = True
        self.realTimeParameterNode = ua.NodeId()
        self.guard = []
        self.resetAll = True
        self.configureJointReport = []


class CRCL_CommandStatusDataType(object):

    '''
    CRCL_CommandStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandID', 'UInt32'),
        ('statusID', 'UInt32'),
        ('commandState', 'CRCL_CommandStateEnumDataType'),
        ('stateDescription', 'String'),
        ('programmFile', 'String'),
        ('programmIndex', 'UInt32'),
        ('programmLength', 'UInt32'),
        ('overridePercent', 'UInt32'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandID = 0
        self.statusID = 0
        self.commandState = ua.CRCL_CommandStateEnumDataType(3)
        self.stateDescription = None
        self.programmFile = None
        self.programmIndex = 0
        self.programmLength = 0
        self.overridePercent = 0


class CRCL_SensorStatusDataType(object):

    '''
    CRCL_SensorStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('sensorID', 'String'),
        ('readCount', 'UInt32'),
        ('lastReadTime', 'UInt32'),
        ('sensorParameterSetting', 'ListOfCRCL_ParameterSettingDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.sensorID = None
        self.readCount = 0
        self.lastReadTime = 0
        self.sensorParameterSetting = []


class CRCL_CountSensorStatusDataType(object):

    '''
    CRCL_CountSensorStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('sensorID', 'String'),
        ('readCount', 'UInt32'),
        ('lastReadTime', 'UInt32'),
        ('sensorParameterSetting', 'ListOfCRCL_ParameterSettingDataType'),
        ('countValue', 'UInt32'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.sensorID = None
        self.readCount = 0
        self.lastReadTime = 0
        self.sensorParameterSetting = []
        self.countValue = 0


class CRCL_OnOffSensorStatusDataType(object):

    '''
    CRCL_OnOffSensorStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('sensorID', 'String'),
        ('readCount', 'UInt32'),
        ('lastReadTime', 'UInt32'),
        ('sensorParameterSetting', 'ListOfCRCL_ParameterSettingDataType'),
        ('on', 'Boolean'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.sensorID = None
        self.readCount = 0
        self.lastReadTime = 0
        self.sensorParameterSetting = []
        self.on = True


class CRCL_ScalarSensorStatusDataType(object):

    '''
    CRCL_ScalarSensorStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('sensorID', 'String'),
        ('readCount', 'UInt32'),
        ('lastReadTime', 'UInt32'),
        ('sensorParameterSetting', 'ListOfCRCL_ParameterSettingDataType'),
        ('scalarValue', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.sensorID = None
        self.readCount = 0
        self.lastReadTime = 0
        self.sensorParameterSetting = []
        self.scalarValue = 0


class CRCL_ForceTorqueSensorStatusDataType(object):

    '''
    CRCL_ForceTorqueSensorStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('sensorID', 'String'),
        ('readCount', 'UInt32'),
        ('lastReadTime', 'UInt32'),
        ('sensorParameterSetting', 'ListOfCRCL_ParameterSettingDataType'),
        ('fx', 'Double'),
        ('fy', 'Double'),
        ('fz', 'Double'),
        ('tx', 'Double'),
        ('ty', 'Double'),
        ('tz', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.sensorID = None
        self.readCount = 0
        self.lastReadTime = 0
        self.sensorParameterSetting = []
        self.fx = 0
        self.fy = 0
        self.fz = 0
        self.tx = 0
        self.ty = 0
        self.tz = 0


class CRCL_SensorStatusesDataType(object):

    '''
    CRCL_SensorStatusesDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('onOffSensorStatus', 'ListOfCRCL_OnOffSensorStatusDataType'),
        ('scalarSensorStatus', 'ListOfCRCL_ScalarSensorStatusDataType'),
        ('countSensorStatus', 'ListOfCRCL_CountSensorStatusDataType'),
        ('forceTorqueSensorStatus', 'ListOfCRCL_ForceTorqueSensorStatusDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.onOffSensorStatus = []
        self.scalarSensorStatus = []
        self.countSensorStatus = []
        self.forceTorqueSensorStatus = []


class CRCL_GripperStatusDataType(object):

    '''
    CRCL_GripperStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('gripperName', 'String'),
        ('gripperOption', 'ListOfCRCL_ParameterSettingDataType'),
        ('holdingObject', 'Boolean'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.gripperName = None
        self.gripperOption = []
        self.holdingObject = True


class CRCL_ParallelGripperStatusDataType(object):

    '''
    CRCL_ParallelGripperStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('gripperName', 'String'),
        ('gripperOption', 'ListOfCRCL_ParameterSettingDataType'),
        ('holdingObject', 'Boolean'),
        ('seperation', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.gripperName = None
        self.gripperOption = []
        self.holdingObject = True
        self.seperation = 0


class CRCL_ThreeFingerGripperStatusDataType(object):

    '''
    CRCL_ThreeFingerGripperStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('gripperName', 'String'),
        ('gripperOption', 'ListOfCRCL_ParameterSettingDataType'),
        ('holdingObject', 'Boolean'),
        ('finger1Position', 'CRCL_FractionDataType'),
        ('finger2Position', 'CRCL_FractionDataType'),
        ('finger3Position', 'CRCL_FractionDataType'),
        ('finger1Force', 'Double'),
        ('finger2Force', 'Double'),
        ('finger3Force', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.gripperName = None
        self.gripperOption = []
        self.holdingObject = True
        self.finger1Position = ua.CRCL_FractionDataType()
        self.finger2Position = ua.CRCL_FractionDataType()
        self.finger3Position = ua.CRCL_FractionDataType()
        self.finger1Force = 0
        self.finger2Force = 0
        self.finger3Force = 0


class CRCL_VacuumGripperStatusDataType(object):

    '''
    CRCL_VacuumGripperStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('gripperName', 'String'),
        ('gripperOption', 'ListOfCRCL_ParameterSettingDataType'),
        ('holdingObject', 'Boolean'),
        ('isPowered', 'Boolean'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.gripperName = None
        self.gripperOption = []
        self.holdingObject = True
        self.isPowered = True


class CRCL_SettingsStatusDataType(object):

    '''
    CRCL_SettingsStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('angleUnitName', 'CRCL_AngleUnitEnumDataType'),
        ('endEffectorParameterSetting', 'ListOfCRCL_ParameterSettingDataType'),
        ('endEffectorSetting', 'CRCL_FractionDataType'),
        ('forceUnitName', 'CRCL_ForceUnitEnumDataType'),
        ('jointLimits', 'ListOfCRCL_JointLimitDataType'),
        ('intermediatePoseTolernace', 'CRCL_PoseToleranceDataType'),
        ('lengthUnitName', 'CRCL_LengthUnitEnumDataType'),
        ('maxCartesianLimit', 'CRCL_PointDataType'),
        ('minCartesianLimit', 'CRCL_PointDataType'),
        ('motionCoorinated', 'Boolean'),
        ('poseTolerance', 'CRCL_PoseToleranceDataType'),
        ('robotParameterSetting', 'ListOfCRCL_ParameterSettingDataType'),
        ('rotAccelAbsolute', 'CRCL_RotAccelAbsoluteDataType'),
        ('rotAccelRelative', 'CRCL_RotAccelRelativeDataType'),
        ('rotSpeedAbsolute', 'CRCL_RotSpeedAbsoluteDataType'),
        ('rotSpeedRelative', 'CRCL_RotSpeedRelativeDataType'),
        ('torqueUnitName', 'CRCL_TorqueUnitEnumDataType'),
        ('transAccelAbsolute', 'CRCL_TransAccelAbsoluteDataType'),
        ('transAccelRelative', 'CRCL_TransAccelRelativeDataType'),
        ('transSpeedAbsolute', 'CRCL_TransSpeedAbsoluteDataType'),
        ('transSpeedRelative', 'CRCL_TransSpeedRelativeDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.angleUnitName = ua.CRCL_AngleUnitEnumDataType(1)
        self.endEffectorParameterSetting = []
        self.endEffectorSetting = ua.CRCL_FractionDataType()
        self.forceUnitName = ua.CRCL_ForceUnitEnumDataType(2)
        self.jointLimits = []
        self.intermediatePoseTolernace = ua.CRCL_PoseToleranceDataType()
        self.lengthUnitName = ua.CRCL_LengthUnitEnumDataType(2)
        self.maxCartesianLimit = ua.CRCL_PointDataType()
        self.minCartesianLimit = ua.CRCL_PointDataType()
        self.motionCoorinated = True
        self.poseTolerance = ua.CRCL_PoseToleranceDataType()
        self.robotParameterSetting = []
        self.rotAccelAbsolute = ua.CRCL_RotAccelAbsoluteDataType()
        self.rotAccelRelative = ua.CRCL_RotAccelRelativeDataType()
        self.rotSpeedAbsolute = ua.CRCL_RotSpeedAbsoluteDataType()
        self.rotSpeedRelative = ua.CRCL_RotSpeedRelativeDataType()
        self.torqueUnitName = ua.CRCL_TorqueUnitEnumDataType(1)
        self.transAccelAbsolute = ua.CRCL_TransAccelAbsoluteDataType()
        self.transAccelRelative = ua.CRCL_TransAccelRelativeDataType()
        self.transSpeedAbsolute = ua.CRCL_TransSpeedAbsoluteDataType()
        self.transSpeedRelative = ua.CRCL_TransSpeedRelativeDataType()


class CRCL_PoseStatusDataType(object):

    '''
    CRCL_PoseStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('pose', 'CRCL_PoseDataType'),
        ('twist', 'CRCL_TwistDataType'),
        ('wrench', 'CRCL_WrenchDataType'),
        ('configuration', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.pose = ua.CRCL_PoseDataType()
        self.twist = ua.CRCL_TwistDataType()
        self.wrench = ua.CRCL_WrenchDataType()
        self.configuration = None


class CRCL_JointLimitDataType(object):

    '''
    CRCL_JointLimitDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('jointNumber', 'UInt32'),
        ('jointMinPosition', 'Double'),
        ('jointMaxPosition', 'Double'),
        ('jointMaxTorqueOrForce', 'Double'),
        ('jointMaxVelocity', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.jointNumber = 0
        self.jointMinPosition = 0
        self.jointMaxPosition = 0
        self.jointMaxTorqueOrForce = 0
        self.jointMaxVelocity = 0


class CRCL_JointStatusDataType(object):

    '''
    CRCL_JointStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('jointNumber', 'UInt32'),
        ('jointPosition', 'Double'),
        ('jointTorqueOrForce', 'Double'),
        ('jointVelocity', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.jointNumber = 0
        self.jointPosition = 0
        self.jointTorqueOrForce = 0
        self.jointVelocity = 0


class CRCL_JointStatusesDataType(object):

    '''
    CRCL_JointStatusesDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('jointStatus', 'ListOfCRCL_JointStatusDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.jointStatus = []


class CRCLStatusDataType(object):

    '''
    CRCLStatusDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('commandStatus', 'CRCL_CommandStatusDataType'),
        ('jointStatus', 'CRCL_JointStatusesDataType'),
        ('poseStatus', 'CRCL_PoseStatusDataType'),
        ('gripperStatus', 'CRCL_GripperStatusDataType'),
        ('settingsStatus', 'CRCL_SettingsStatusDataType'),
        ('sensorStatuses', 'CRCL_SensorStatusesDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.commandStatus = ua.CRCL_CommandStatusDataType()
        self.jointStatus = ua.CRCL_JointStatusesDataType()
        self.poseStatus = ua.CRCL_PoseStatusDataType()
        self.gripperStatus = ua.CRCL_GripperStatusDataType()
        self.settingsStatus = ua.CRCL_SettingsStatusDataType()
        self.sensorStatuses = ua.CRCL_SensorStatusesDataType()


class CRCLCommandsUnionDataType(object):

    '''
    CRCLCommandsUnionDataType structure autogenerated from xml
    '''

    ua_types = [
        ('SwitchField', 'UInt32'),
        ('initCanonCommand', 'InitCanonDataType'),
        ('endCanonCommand', 'EndCanonDataType'),
        ('messageCommand', 'MessageDataType'),
        ('moveToCommand', 'MoveToDataType'),
        ('moveScrewCommand', 'MoveScrewDataType'),
        ('moveThroughToCommand', 'MoveThroughToDataType'),
        ('dwellCommand', 'DwellDataType'),
        ('actuateJointsCommand', 'ActuateJointsDataType'),
        ('configureJointReportsCommand', 'ConfigureJointReportsDataType'),
        ('setDefaultJointPositionsTolerancesCommand', 'SetDefaultJointPositionsTolerancesDataType'),
        ('getStatusCommand', 'GetStatusDataType'),
        ('closeToolChangerCommand', 'CloseToolChangerDataType'),
        ('openToolChangerCommand', 'OpenToolChangerDataType'),
        ('setRobotParametersCommand', 'SetRobotParametersDataType'),
        ('setEndeffectorParametersCommand', 'SetEndeffectorParametersDataType'),
        ('setEndeffectorCommand', 'SetEndeffectorDataType'),
        ('setTransAccelCommand', 'SetTransAccelDataType'),
        ('setTransSpeedCommand', 'SetTransSpeedDataType'),
        ('setRotAccelCommand', 'SetRotAccelDataType'),
        ('setRotSpeedCommand', 'SetRotSpeedDataType'),
        ('setAngleUnitsCommand', 'SetAngleUnitsDataType'),
        ('setEndPoseToleranceCommand', 'SetEndPoseToleranceDataType'),
        ('setForceUnitsCommand', 'SetForceUnitsDataType'),
        ('setIntermediatePoseToleranceCommand', 'SetIntermediatePoseToleranceDataType'),
        ('setLengthUnitsCommand', 'SetLengthUnitsDataType'),
        ('setMotionCoordinationCommand', 'SetMotionCoordinationDataType'),
        ('setTorqueUnitsCommand', 'SetTorqueUnitsDataType'),
        ('stopMotionCommand', 'StopMotionDataType'),
        ('configureStatusReportCommand', 'ConfigureStatusReportDataType'),
        ('enableSensorCommand', 'EnableSensorDataType'),
        ('disableSensorCommand', 'DisableSensorDataType'),
        ('enableGripperCommand', 'EnableGripperDataType'),
        ('disableGripperCommand', 'DisableGripperDataType'),
        ('enableRobotParameterStatusCommand', 'EnableRobotParameterStatusDataType'),
        ('disableRobotParameterStatusCommand', 'DisableRobotParameterStatusDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.SwitchField = 0
        self.initCanonCommand = ua.InitCanonDataType()
        self.endCanonCommand = ua.EndCanonDataType()
        self.messageCommand = ua.MessageDataType()
        self.moveToCommand = ua.MoveToDataType()
        self.moveScrewCommand = ua.MoveScrewDataType()
        self.moveThroughToCommand = ua.MoveThroughToDataType()
        self.dwellCommand = ua.DwellDataType()
        self.actuateJointsCommand = ua.ActuateJointsDataType()
        self.configureJointReportsCommand = ua.ConfigureJointReportsDataType()
        self.setDefaultJointPositionsTolerancesCommand = ua.SetDefaultJointPositionsTolerancesDataType()
        self.getStatusCommand = ua.GetStatusDataType()
        self.closeToolChangerCommand = ua.CloseToolChangerDataType()
        self.openToolChangerCommand = ua.OpenToolChangerDataType()
        self.setRobotParametersCommand = ua.SetRobotParametersDataType()
        self.setEndeffectorParametersCommand = ua.SetEndeffectorParametersDataType()
        self.setEndeffectorCommand = ua.SetEndeffectorDataType()
        self.setTransAccelCommand = ua.SetTransAccelDataType()
        self.setTransSpeedCommand = ua.SetTransSpeedDataType()
        self.setRotAccelCommand = ua.SetRotAccelDataType()
        self.setRotSpeedCommand = ua.SetRotSpeedDataType()
        self.setAngleUnitsCommand = ua.SetAngleUnitsDataType()
        self.setEndPoseToleranceCommand = ua.SetEndPoseToleranceDataType()
        self.setForceUnitsCommand = ua.SetForceUnitsDataType()
        self.setIntermediatePoseToleranceCommand = ua.SetIntermediatePoseToleranceDataType()
        self.setLengthUnitsCommand = ua.SetLengthUnitsDataType()
        self.setMotionCoordinationCommand = ua.SetMotionCoordinationDataType()
        self.setTorqueUnitsCommand = ua.SetTorqueUnitsDataType()
        self.stopMotionCommand = ua.StopMotionDataType()
        self.configureStatusReportCommand = ua.ConfigureStatusReportDataType()
        self.enableSensorCommand = ua.EnableSensorDataType()
        self.disableSensorCommand = ua.DisableSensorDataType()
        self.enableGripperCommand = ua.EnableGripperDataType()
        self.disableGripperCommand = ua.DisableGripperDataType()
        self.enableRobotParameterStatusCommand = ua.EnableRobotParameterStatusDataType()
        self.disableRobotParameterStatusCommand = ua.DisableRobotParameterStatusDataType()


class CRCLCommandsBufferDataType(object):

    '''
    CRCLCommandsBufferDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('crclCommands', 'ListOfCRCLCommandsUnionDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.crclCommands = []


class CRCLCommandParamsSetDataType(object):

    '''
    CRCLCommandParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()


class InitCanonParamsSetDataType(object):

    '''
    InitCanonParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()


class EndCanonParamsSetDataType(object):

    '''
    EndCanonParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()


class GetStatusParamsSetDataType(object):

    '''
    GetStatusParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()


class CloseToolChangerParamsSetDataType(object):

    '''
    CloseToolChangerParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()


class OpenToolChangerParamsSetDataType(object):

    '''
    OpenToolChangerParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()


class MessageParamsSetDataType(object):

    '''
    MessageParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('message', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.message = None


class MoveToParamsSetDataType(object):

    '''
    MoveToParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('moveStraight', 'Boolean'),
        ('endPosition', 'CRCL_PoseDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.moveStraight = True
        self.endPosition = ua.CRCL_PoseDataType()


class MoveScrewParamsSetDataType(object):

    '''
    MoveScrewParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('startPosition', 'CRCL_PoseDataType'),
        ('axisPoint', 'CRCL_PointDataType'),
        ('axialDistanceFree', 'Double'),
        ('axialDistanceScrew', 'Double'),
        ('turn', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.startPosition = ua.CRCL_PoseDataType()
        self.axisPoint = ua.CRCL_PointDataType()
        self.axialDistanceFree = 0
        self.axialDistanceScrew = 0
        self.turn = 0


class MoveThroughToParamsSetDataType(object):

    '''
    MoveThroughToParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('moveStraight', 'Boolean'),
        ('waypoint', 'ListOfCRCL_PoseDataType'),
        ('numPositions', 'Int32'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.moveStraight = True
        self.waypoint = []
        self.numPositions = 0


class DwellParamsSetDataType(object):

    '''
    DwellParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('dwellTime', 'Double'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.dwellTime = 0


class ActuateJointsParamsSetDataType(object):

    '''
    ActuateJointsParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('actuateJoint', 'ListOfCRCL_ActuateJointDataType'),
        ('jointTolerances', 'CRCL_JointPositionsTolerancesDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.actuateJoint = []
        self.jointTolerances = ua.CRCL_JointPositionsTolerancesDataType()


class ConfigureJointReportsParamsSetDataType(object):

    '''
    ConfigureJointReportsParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('resetAll', 'Boolean'),
        ('configureJointReport', 'ListOfCRCL_ConfigureJointReportDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.resetAll = True
        self.configureJointReport = []


class SetDefaultJointPositionsTolerancesParamsSetDataType(object):

    '''
    SetDefaultJointPositionsTolerancesParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('jointTolerances', 'CRCL_JointPositionsTolerancesDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.jointTolerances = ua.CRCL_JointPositionsTolerancesDataType()


class SetRobotParametersParamsSetDataType(object):

    '''
    SetRobotParametersParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('parameterSetting', 'ListOfCRCL_ParameterSettingDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.parameterSetting = []


class SetEndeffectorParametersParamsSetDataType(object):

    '''
    SetEndeffectorParametersParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('parameterSetting', 'ListOfCRCL_ParameterSettingDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.parameterSetting = []


class SetEndeffectorParamsSetDataType(object):

    '''
    SetEndeffectorParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('setting', 'CRCL_FractionDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.setting = ua.CRCL_FractionDataType()


class SetTransSpeedParamsSetDataType(object):

    '''
    SetTransSpeedParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('transSpeed', 'CRCL_TransSpeedDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.transSpeed = ua.CRCL_TransSpeedDataType()


class SetTransAccelParamsSetDataType(object):

    '''
    SetTransAccelParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('transAccel', 'CRCL_TransAccelDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.transAccel = ua.CRCL_TransAccelDataType()


class SetRotSpeedParamsSetDataType(object):

    '''
    SetRotSpeedParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('rotSpeed', 'CRCL_RotSpeedDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.rotSpeed = ua.CRCL_RotSpeedDataType()


class SetRotAccelParamsSetDataType(object):

    '''
    SetRotAccelParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('rotAccel', 'CRCL_RotAccelDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.rotAccel = ua.CRCL_RotAccelDataType()


class SetAngleUnitsParamsSetDataType(object):

    '''
    SetAngleUnitsParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('unitName', 'CRCL_AngleUnitEnumDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.unitName = ua.CRCL_AngleUnitEnumDataType(1)


class SetEndPoseToleranceParamsSetDataType(object):

    '''
    SetEndPoseToleranceParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('tolerance', 'CRCL_PoseToleranceDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.tolerance = ua.CRCL_PoseToleranceDataType()


class SetForceUnitsParamsSetDataType(object):

    '''
    SetForceUnitsParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('unitName', 'CRCL_ForceUnitEnumDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.unitName = ua.CRCL_ForceUnitEnumDataType(2)


class SetIntermediatePoseToleranceParamsSetDataType(object):

    '''
    SetIntermediatePoseToleranceParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('tolerance', 'CRCL_PoseToleranceDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.tolerance = ua.CRCL_PoseToleranceDataType()


class SetLengthUnitsParamsSetDataType(object):

    '''
    SetLengthUnitsParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('unitName', 'CRCL_LengthUnitEnumDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.unitName = ua.CRCL_LengthUnitEnumDataType(2)


class SetMotionCoordinationParamsSetDataType(object):

    '''
    SetMotionCoordinationParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('coordinated', 'Boolean'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.coordinated = True


class SetTorqueUnitsParamsSetDataType(object):

    '''
    SetTorqueUnitsParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('unitName', 'CRCL_TorqueUnitEnumDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.unitName = ua.CRCL_TorqueUnitEnumDataType(1)


class StopMotionParamsSetDataType(object):

    '''
    StopMotionParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('stopCondition', 'CRCL_StopConditionEnumDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.stopCondition = ua.CRCL_StopConditionEnumDataType(2)


class ConfigureStatusReportParamsSetDataType(object):

    '''
    ConfigureStatusReportParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('reportJointStatuses', 'Boolean'),
        ('reportPoseStatus', 'Boolean'),
        ('reportGripperStatus', 'Boolean'),
        ('reportSettingsStatus', 'Boolean'),
        ('reportSensorsStatus', 'Boolean'),
        ('reportGuardsStatus', 'Boolean'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.reportJointStatuses = True
        self.reportPoseStatus = True
        self.reportGripperStatus = True
        self.reportSettingsStatus = True
        self.reportSensorsStatus = True
        self.reportGuardsStatus = True


class EnableSensorParamsSetDataType(object):

    '''
    EnableSensorParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('sensorID', 'String'),
        ('sensorOption', 'ListOfCRCL_ParameterSettingDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.sensorID = None
        self.sensorOption = []


class DisableSensorParamsSetDataType(object):

    '''
    DisableSensorParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('sensorID', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.sensorID = None


class EnableGripperParamsSetDataType(object):

    '''
    EnableGripperParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('gripperName', 'String'),
        ('gripperOption', 'ListOfCRCL_ParameterSettingDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.gripperName = None
        self.gripperOption = []


class DisableGripperParamsSetDataType(object):

    '''
    DisableGripperParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('gripperName', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.gripperName = None


class EnableRobotParameterStatusParamsSetDataType(object):

    '''
    EnableRobotParameterStatusParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('robotParameterName', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.robotParameterName = None


class DisableRobotParameterStatusParamsSetDataType(object):

    '''
    DisableRobotParameterStatusParamsSetDataType structure autogenerated from xml
    '''

    ua_types = [
        ('name', 'String'),
        ('realTimeParameter', 'Boolean'),
        ('realTimeParameterNodeID', 'NodeId'),
        ('robotParameterName', 'String'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.name = None
        self.realTimeParameter = True
        self.realTimeParameterNodeID = ua.NodeId()
        self.robotParameterName = None


class CRCLCommandsParamsSetsUnionDataType(object):

    '''
    CRCLCommandsParamsSetsUnionDataType structure autogenerated from xml
    '''

    ua_types = [
        ('SwitchField', 'UInt32'),
        ('initCanonParamsSet', 'InitCanonParamsSetDataType'),
        ('endCanonParamsSet', 'EndCanonParamsSetDataType'),
        ('messageParamsSet', 'MessageParamsSetDataType'),
        ('moveToParamsSet', 'MoveToParamsSetDataType'),
        ('moveScrewParamsSet', 'MoveScrewParamsSetDataType'),
        ('moveThroughToParamsSet', 'MoveThroughToParamsSetDataType'),
        ('dwellParamsSet', 'DwellParamsSetDataType'),
        ('actuateJointsParamsSet', 'ActuateJointsParamsSetDataType'),
        ('configureJointReportsParamsSet', 'ConfigureJointReportsParamsSetDataType'),
        ('setDefaultJointPositionsTolerancesParamsSet', 'SetDefaultJointPositionsTolerancesParamsSetDataType'),
        ('getStatusParamsSet', 'GetStatusParamsSetDataType'),
        ('closeToolChangerParamsSet', 'CloseToolChangerParamsSetDataType'),
        ('openToolChangerParamsSet', 'OpenToolChangerParamsSetDataType'),
        ('setRobotParametersParamsSet', 'SetRobotParametersParamsSetDataType'),
        ('setEndeffectorParametersParamsSet', 'SetEndeffectorParametersParamsSetDataType'),
        ('setEndeffectorParamsSet', 'SetEndeffectorParamsSetDataType'),
        ('setTransAccelParamsSet', 'SetTransAccelParamsSetDataType'),
        ('setTransSpeedParamsSet', 'SetTransSpeedParamsSetDataType'),
        ('setRotAccelParamsSet', 'SetRotAccelParamsSetDataType'),
        ('setRotSpeedParamsSet', 'SetRotSpeedParamsSetDataType'),
        ('setAngleUnitsParamsSet', 'SetAngleUnitsParamsSetDataType'),
        ('setEndPoseToleranceParamsSet', 'SetEndPoseToleranceParamsSetDataType'),
        ('setForceUnitsParamsSet', 'SetForceUnitsParamsSetDataType'),
        ('setIntermediatePoseToleranceParamsSet', 'SetIntermediatePoseToleranceParamsSetDataType'),
        ('setLengthUnitsParamsSet', 'SetLengthUnitsParamsSetDataType'),
        ('setMotionCoordinationParamsSet', 'SetMotionCoordinationParamsSetDataType'),
        ('setTorqueUnitsParamsSet', 'SetTorqueUnitsParamsSetDataType'),
        ('stopMotionParamsSet', 'StopMotionParamsSetDataType'),
        ('configureStatusReportParamsSet', 'ConfigureStatusReportParamsSetDataType'),
        ('enableSensorParamsSet', 'EnableSensorParamsSetDataType'),
        ('disableSensorParamsSet', 'DisableSensorParamsSetDataType'),
        ('enableGripperParamsSet', 'EnableGripperParamsSetDataType'),
        ('disableGripperParamsSet', 'DisableGripperParamsSetDataType'),
        ('enableRobotParameterStatusParamsSet', 'EnableRobotParameterStatusParamsSetDataType'),
        ('disableRobotParameterStatusParamsSet', 'DisableRobotParameterStatusParamsSetDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.SwitchField = 0
        self.initCanonParamsSet = ua.InitCanonParamsSetDataType()
        self.endCanonParamsSet = ua.EndCanonParamsSetDataType()
        self.messageParamsSet = ua.MessageParamsSetDataType()
        self.moveToParamsSet = ua.MoveToParamsSetDataType()
        self.moveScrewParamsSet = ua.MoveScrewParamsSetDataType()
        self.moveThroughToParamsSet = ua.MoveThroughToParamsSetDataType()
        self.dwellParamsSet = ua.DwellParamsSetDataType()
        self.actuateJointsParamsSet = ua.ActuateJointsParamsSetDataType()
        self.configureJointReportsParamsSet = ua.ConfigureJointReportsParamsSetDataType()
        self.setDefaultJointPositionsTolerancesParamsSet = ua.SetDefaultJointPositionsTolerancesParamsSetDataType()
        self.getStatusParamsSet = ua.GetStatusParamsSetDataType()
        self.closeToolChangerParamsSet = ua.CloseToolChangerParamsSetDataType()
        self.openToolChangerParamsSet = ua.OpenToolChangerParamsSetDataType()
        self.setRobotParametersParamsSet = ua.SetRobotParametersParamsSetDataType()
        self.setEndeffectorParametersParamsSet = ua.SetEndeffectorParametersParamsSetDataType()
        self.setEndeffectorParamsSet = ua.SetEndeffectorParamsSetDataType()
        self.setTransAccelParamsSet = ua.SetTransAccelParamsSetDataType()
        self.setTransSpeedParamsSet = ua.SetTransSpeedParamsSetDataType()
        self.setRotAccelParamsSet = ua.SetRotAccelParamsSetDataType()
        self.setRotSpeedParamsSet = ua.SetRotSpeedParamsSetDataType()
        self.setAngleUnitsParamsSet = ua.SetAngleUnitsParamsSetDataType()
        self.setEndPoseToleranceParamsSet = ua.SetEndPoseToleranceParamsSetDataType()
        self.setForceUnitsParamsSet = ua.SetForceUnitsParamsSetDataType()
        self.setIntermediatePoseToleranceParamsSet = ua.SetIntermediatePoseToleranceParamsSetDataType()
        self.setLengthUnitsParamsSet = ua.SetLengthUnitsParamsSetDataType()
        self.setMotionCoordinationParamsSet = ua.SetMotionCoordinationParamsSetDataType()
        self.setTorqueUnitsParamsSet = ua.SetTorqueUnitsParamsSetDataType()
        self.stopMotionParamsSet = ua.StopMotionParamsSetDataType()
        self.configureStatusReportParamsSet = ua.ConfigureStatusReportParamsSetDataType()
        self.enableSensorParamsSet = ua.EnableSensorParamsSetDataType()
        self.disableSensorParamsSet = ua.DisableSensorParamsSetDataType()
        self.enableGripperParamsSet = ua.EnableGripperParamsSetDataType()
        self.disableGripperParamsSet = ua.DisableGripperParamsSetDataType()
        self.enableRobotParameterStatusParamsSet = ua.EnableRobotParameterStatusParamsSetDataType()
        self.disableRobotParameterStatusParamsSet = ua.DisableRobotParameterStatusParamsSetDataType()


class CRCLCommandsParamsSetsBufferDataType(object):

    '''
    CRCLCommandsParamsSetsBufferDataType structure autogenerated from xml
    '''

    ua_types = [
        ('id', 'UInt32'),
        ('name', 'String'),
        ('crclCommandsParamsSets', 'ListOfCRCLCommandsParamsSetsUnionDataType'),
    ]
    def __str__(self):
        vals = [name + ": " + str(val) for name, val in self.__dict__.items()]
        return self.__class__.__name__ + "(" + ", ".join(vals) + ")"

    __repr__ = __str__

    def __init__(self):
        self.id = 0
        self.name = None
        self.crclCommandsParamsSets = []
